-- Migration SQL for creating user roles table

-- 1. Create an ENUM type for the roles
CREATE TYPE public.app_role AS ENUM ('user', 'admin', 'super_admin');

-- 2. Create the user_roles table
CREATE TABLE public.user_roles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    role public.app_role NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,

    -- Ensure a user can only have one role entry (optional, but good practice)
    CONSTRAINT user_roles_user_id_unique UNIQUE (user_id)
);

-- 3. Enable RLS for the new table
ALTER TABLE public.user_roles ENABLE ROW LEVEL SECURITY;

-- 4. Add basic RLS policies (Refine these in the RLS step)
--    - Users should not be able to see/modify roles directly.
--    - Admins might need read access (e.g., to list users and roles).
--    - Super Admins might need full access.
--    (These policies will likely depend on the is_current_user_admin() function defined later)

-- Example placeholder policies (Refine these in the RLS step):
-- CREATE POLICY "Allow admin read access" ON public.user_roles
--     FOR SELECT
--     USING (public.is_current_user_admin()); -- Placeholder for the function to be created

-- CREATE POLICY "Allow super_admin full access" ON public.user_roles
--     FOR ALL
--     USING (public.is_current_user_role('super_admin')); -- Placeholder for a more specific function if needed

-- Add comments to the table and columns
COMMENT ON TABLE public.user_roles IS 'Stores application-specific roles for users.';
COMMENT ON COLUMN public.user_roles.user_id IS 'References the user in auth.users.';
COMMENT ON COLUMN public.user_roles.role IS 'The role assigned to the user.';

-- Optional: Trigger to update updated_at timestamp
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Drop trigger if exists before creating it to make the script idempotent
DROP TRIGGER IF EXISTS on_user_roles_updated ON public.user_roles;

CREATE TRIGGER on_user_roles_updated
  BEFORE UPDATE ON public.user_roles
  FOR EACH ROW
  EXECUTE PROCEDURE public.handle_updated_at();

-- Grant usage on the enum type to necessary roles (e.g., authenticated, service_role)
-- Adjust roles as per your Supabase setup
GRANT USAGE ON TYPE public.app_role TO authenticated;
GRANT USAGE ON TYPE public.app_role TO service_role;

-- Grant permissions on the table (adjust as needed, RLS will enforce access)
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.user_roles TO service_role;
GRANT SELECT ON TABLE public.user_roles TO authenticated; -- Example: Allow users to potentially read their own role if needed via RLS